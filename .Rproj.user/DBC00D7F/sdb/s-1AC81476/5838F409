{
    "collab_server" : "",
    "contents" : "# jonashaslbeck@gmail.com, August 2017\n\n# .rs.restartR()\n# library(devtools)\n# install_github('LauraBringmann/tvvarGAM')\n# library(tvvarGAM)\n\n\n# ----------------------------------------------------------------------------------\n# ----------------------- 1) Data Preparation --------------------------------------\n# ----------------------------------------------------------------------------------\n\nlibrary(mgm) # For symptom dataset\n\n# Subset Mood variables\nmood_data <- as.matrix(symptom_data$data[, 1:12])\nmood_labels <- symptom_data$colnames[1:12]\ncolnames(mood_data) <- mood_labels\ntime_data <- symptom_data$data_time\n\n\ndim(mood_data)\nhead(mood_data[,1:7])\nhead(time_data)\n\n\n\n# ----------------------------------------------------------------------------------\n# ----------------------- 2) Estimation --------------------------------------------\n# ----------------------------------------------------------------------------------\n\ntvvargam_obj <- tvvarGAM(data = mood_data, \n                         nb = 10, \n                         consec = time_data$beepno)\n\n\n# ----------------------------------------------------------------------------------\n# ----------------------- 3) Visualization -----------------------------------------\n# ----------------------------------------------------------------------------------\n\n\n# ----- Postprocessing tvvarGAM() output a bit ------\ndim(tvvargam_obj)\n\nind_thin <- \n\n\nlibrary(qgraph)\n\nfigDir <- \"/Volumes/Macintosh HD 2/Dropbox/Time-Varying Networks/paper2_ComparingMethods/3_code/gamtvvar_sim/figures_paper/\"\n\n# ----- Aux Functions ------\n\n# Function for timeline\nf_timeline_new <- function(length = .15, \n                           gap = .005, \n                           mar = c(0,0,0,0), \n                           ylim = c(-.1,.1), \n                           ytext = -.1,\n                           cex = 1) {\n  \n  \n  par(mar=mar)\n  plot.new()\n  plot.window(xlim=c(0,1), ylim=ylim)\n  # box()\n  \n  # arrows\n  p_weeks <- c(4,14,4,12)\n  bor_end <- c(0,cumsum(p_weeks)/sum(p_weeks))\n  for(i in 1:4) {\n    arrows(bor_end[i]+gap, 0, bor_end[i+1]-gap, code=3, length=length, lwd=1.5)\n  }\n  #for(i in 1:3) abline(v=bor_end[i+1], lty=2, col='grey')\n  \n  # text\n  t_lengths <- p_weeks / sum(p_weeks)\n  midpoints <- bor_end[-1] - t_lengths/2\n  \n  text(midpoints, rep(ytext, 4), c('Baseline (4w)',\n                                   'Double-blind period (14w)',\n                                   'Postassessment (4w)',\n                                   'Additional Postassessment (12w)'),\n       cex = cex)\n  \n  # change of medication\n  points(c(42,98) / (sum(p_weeks)*7), rep(0,2), pch=20, cex=1.5)\n  \n}\n\n# ----- Preprocessing tvvarGAM() output ------\n\nmean_wadj <- apply(tvvar_obj$wadj[, , 1, ], 1:2, mean) # also used for mean layout below\n\n\npar_ests <- tvvar_obj$wadj\nind_negative <- which(tvvar_obj$signs == -1, arr.ind = T)\npar_ests[ind_negative] <- par_ests[ind_negative] * -1\n\n\n# ----- Settings ------\n\n\n\n# ----- Plotting ------\n\npdf(paste0(figDir, \"Fig_Application_tvvarGAM.pdf\"), width = 8, height = 7)\n\n# 1) Define Layout\n\nlmat <- matrix(c(1, 2, 3,\n                 4, 4, 4,\n                 5, 5, 5), ncol=3, byrow = T)\nlo <- layout(lmat, \n             heights = c(.7,.1, .85), \n             widths = c(1, 1, 1))\n# layout.show(lo)\n\n\n# 2) Two Network Plots\n\n# Get layout of mean graph\nQ <- qgraph(mean_wadj, DoNotPlot=TRUE)\n\n\n# Plot graph at selected fixed time points\ntpSelect <- c(8, 15, 18)\n\nfor(tp in tpSelect) {\n  qgraph(t(tvvar_obj$wadj[, , 1, tp]), \n         layout = Q$layout,\n         edge.color = t(tvvar_obj$edgecolor[, , 1, tp]), \n         labels = mood_labels, \n         vsize = 13, \n         esize = 10,\n         asize = 10, \n         mar = c(6, 6, 6, 6), \n         minimum = 0, \n         maximum = .22, \n         pie = pred_obj$tverrors[[tp]][, 2])\n}\n\n# 4) Timeline\nf_timeline_new(length = .1, \n               mar=c(0, 4, 0, 1), \n               ylim = c(-1.2, .2), \n               ytext = -.9, \n               cex = 1)\n\n# 5) Line-plots + CIs\n\nplot.new()\npar(mar = c(4,4,1,1))\nplot.window(xlim=c(1, 20), ylim=c(-.7, 1))\naxis(1, c(1, 5, 10, 15, 20), labels=T)\naxis(2, c(-.7, -.5, -.25, 0, .25, .5, .75, 1), las=2)\nabline(h = 0, col = 'grey', lty=2)\ntitle(xlab = \"Estimation points\", cex.lab = 1.2)\ntitle(ylab = \"Parameter estimate\", cex.lab = 1.2)\n\n# Displayed parameters:\n# doubt (11) -> doubt (11)\n# satisfied (4) -> relaxed (1) \n# satisfied (4) -> guilty (9) \nmood_labels\n\nm_par_display <- matrix(c(11, 11, \n                          9, 4, \n                          10, 4), ncol = 2, byrow = T)\n\n# Select colors\nlibrary(RColorBrewer)\ncols <- brewer.pal(5, 'Set1')[c(2,4,5)] # avoid red/green beause used for edges in upper panel\nv_jitter <- c(-.1, 0, .1)\n\nfor(i in 1:nrow(m_par_display)) {\n  \n  # Plot point estimates\n  par_row <- m_par_display[i, ]\n  P1_pointest <- par_ests[par_row[1], par_row[2], 1, ]\n  points((1:20)+v_jitter[i], P1_pointest, col = cols[i], pch = 20, cex = 2) \n  lines((1:20)+v_jitter[i], P1_pointest, col = cols[i], lwd = 2) \n  \n  # Plot uncertainty estimates\n  CIs <- apply(res_obj$bootParameters[par_row[1], par_row[2], 1, , ], 1, function(x) {\n    quantile(x, probs = c(.05, .95))\n  } )\n  CIs <- CIs - P1_pointest # center them!\n  \n  segments((1:20)+v_jitter[i], P1_pointest - CIs[1,]  , (1:20)+v_jitter[i], P1_pointest + CIs[1,], \n           col = cols[i], \n           lwd = 2)\n  \n}\n\n\n\n# Legend\nlegend_labels <- c(expression('Doubt'[\"t-1\"]  %->%  'Doubt'[\"t\"]),\n                   expression('Satisfied'[\"t-1\"]  %->%  'Relaxed'[\"t\"]),\n                   expression('Satisfied'[\"t-1\"]  %->%  'Guilty'[\"t\"]))\n\nlegend(12, .95, \n       legend_labels,\n       col = cols, \n       lwd = 2, bty = 'n', cex = 1.5)\n\n\ndev.off()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1502375530759.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "51|22|89|0|\n",
    "hash" : "2499368664",
    "id" : "5838F409",
    "lastKnownWriteTime" : 4328652808,
    "last_content_update" : 1502379377371,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}